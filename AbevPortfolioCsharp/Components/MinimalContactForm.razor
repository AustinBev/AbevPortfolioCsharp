@using AbevPortfolioCsharp.Models
@inject AbevPortfolioCsharp.Services.IContactService ContactService
@inject IJSRuntime JS

<EditForm Model="@model" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="grid">
        <div class="field">
            <label>Name</label>
            <InputText class="input" @bind-Value="model.Name" />
            <ValidationMessage For="() => model.Name" />
        </div>

        <div class="field">
            <label>Email <span class="muted">(work email preferred)</span></label>
            <InputText class="input" @bind-Value="model.Email" />
            <ValidationMessage For="() => model.Email" />
        </div>

        <div class="field full">
            <label>Verification link <span class="muted">(LinkedIn, GitHub, company or job description)</span></label>
            <InputText class="input" @bind-Value="model.VerificationUrl" />
            <ValidationMessage For="() => model.VerificationUrl" />
        </div>

        <div class="field full">
            <label>Message <span class="muted">(optional, 1–2 sentences)</span></label>
            <InputTextArea class="input textarea" rows="4" @bind-Value="model.Message" />
        </div>

        <!-- Honeypot -->
        <input class="hp" @bind="model.Hp" autocomplete="off" tabindex="-1" aria-hidden="true" />
    </div>

    <!-- Explicitly rendered widget -->
    <div @ref="_tsDiv"></div>

    <button class="btn" disabled="@(sending || !turnstileReady)">
        @((sending ? "Sending…" : "Send"))
    </button>

    @if (!string.IsNullOrEmpty(status))
    {
        <p class="@statusClass">@status</p>
    }
</EditForm>

@code {
    private readonly MinimalContactRequest model = new();
    private ElementReference _tsDiv;
    private bool sending;
    private string? status;
    private string statusClass = "status";
    private DateTime renderedAtUtc;

    private bool turnstileReady = false;
    private DotNetObjectReference<MinimalContactForm>? _dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync(
                "cfTurnstile.renderWidget", _tsDiv, "0x4AAAAAABnePV_sFwqcvEMm", _dotNetRef);
            renderedAtUtc = DateTime.UtcNow;
        }
    }

    [JSInvokable]
    public void OnTurnstileReady()
    {
        turnstileReady = true;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        model.SecondsToSubmit = (int)(DateTime.UtcNow - renderedAtUtc).TotalSeconds;

        var token = await JS.InvokeAsync<string>("cfTurnstile.getToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            status = "Please complete verification.";
            statusClass = "status error";
            return;
        }
        model.TurnstileToken = token;

        sending = true; status = null;
        var ok = await ContactService.SendAsync(model);
        sending = false;

        await JS.InvokeVoidAsync("cfTurnstile.reset");
        turnstileReady = false;
        renderedAtUtc = DateTime.UtcNow;

        status = ok ? "Thanks — I’ll review and reply soon."
                    : "Something went wrong. Try again in a minute.";
        statusClass = ok ? "status ok" : "status error";
        if (ok) model.Name = model.Email = model.VerificationUrl = model.Message = model.Hp = "";
    }
}

